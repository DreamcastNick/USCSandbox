name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    types: [ opened, synchronize, reopened ]

jobs:
  build:
    name: "Build Windows"
    runs-on: windows-latest
    env:
      PARALLEL: -j 2

    steps:
      - uses: actions/checkout@v3

      # Install Python
      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Cache external dependencies for glslang/SPIRV-Tools
      - name: Cache glslang / SPIRV-Tools
        id: cache-externals
        uses: actions/cache@v3
        with:
          path: external/*-build/output
          key: windows externals ${{ hashFiles('checkout_glslang_spirv_tools.sh', 'build_glslang_spirv_tools.sh') }}

      # Pull glslang / SPIRV-Tools if cache miss
      - name: Pull glslang / SPIRV-Tools
        if: steps.cache-externals.outputs.cache-hit != 'true'
        shell: bash
        working-directory: ${{ github.workspace }}
        run: ./checkout_glslang_spirv_tools.sh

      # Build glslang / SPIRV-Tools
      - name: Build glslang / SPIRV-Tools
        if: steps.cache-externals.outputs.cache-hit != 'true'
        shell: bash
        working-directory: ${{ github.workspace }}
        run: ./build_glslang_spirv_tools.sh Release 4

      # Install SPIRV-Cross using vcpkg
      - name: Install SPIRV-Cross using vcpkg
        shell: bash
        run: |
          git clone https://github.com/Microsoft/vcpkg.git
          cd vcpkg
          ./bootstrap-vcpkg.sh
          ./vcpkg integrate install
          ./vcpkg install spirv-cross

      # Build SPIRV-Cross
      - name: Build SPIRV-Cross
        shell: bash
        run: |
          cd vcpkg
          ./vcpkg install spirv-cross

      # Upload SPIRV-Cross binaries
      - uses: actions/upload-artifact@v4
        with:
          name: windows-binaries
          path: vcpkg/installed/x64-windows/lib

      # Build C++/CLI Project (SPIRVCrossWrapper)
      - name: Build C++/CLI Project
        run: |
          cd SPIRVCrossWrapper
          msbuild /p:Configuration=Release SPIRVCrossWrapper.vcxproj

      # Restore and Build .NET Solution
      - name: Restore and Build .NET Solution
        run: dotnet build USCSandbox.sln --configuration Release

      # Run .NET tests
      - name: Run .NET tests
        run: dotnet test USCSandbox.sln --verbosity normal

  reuse:
    name: "REUSE license check"
    runs-on: windows-latest
    container: khronosgroup/docker-images:asciidoctor-spec

    steps:
      - uses: actions/checkout@v3

      # REUSE license checker
      - name: license-check
        run: |
          reuse lint
